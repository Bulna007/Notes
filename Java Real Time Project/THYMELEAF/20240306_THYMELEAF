Thymeleaf
---------
Thymeleaf is a modern server-side java template engine that works for both web and standalone applications. it is capable of processing HTML, XML, Javascript, CSS and even plain-text. There are other java template engine frameworks or libraries are available like
1. Apache Freemaker
2. Velocity
3. Wicket
etc

In a Web Application we render the data or view to the enduser using 2 view technologies which are 
1. HTML
2. JSP

1. HTML 
The HTML is meant for rendering static information or information pages of an business/news/stories/blogs which will not change over the course of time, can be rendered directly to the web browsers. These HTML pages doesnt support dynamic data to be rendered aspart of them, so these are not suitable for business applications that produces the dynamic data upon performing the computation operation.
	
So how to render the dynamic data produced by the application?
The only solution that is available is to let the java program itself build the HTML output within the servlet class itself in embedding the dynamic data and write it to the web browser as shown below.
	
Let us write a servlet program, that takes produceCode as an input from the browser and renders the product details as an response back.
	
@WebServlet(urlPatterns={"/product"})	
class ProductDetailsServlet extends HttpServlet {
	public void service(httpReq, httpResp) {
		String productCode = 0;
		
		productCode = httpReq.getParameter("productCode");
		// goto the database and fetch the product data based on productCode
		
		PrintWriter out = httpResp.getWriter();
		out.println("<html>");
		out.println("<body>");
		out.println("<b>Product Name: </b>"+rs.getString("product_nm"));
		out.println("<b>Price: </b>"+rs.getFloat("product_price"));
		out.println("</body>");
		out.println("</html>");
		
		out.close();		
	}
}	

There are lot of problems in generating dynamic html data within the java program:
1. by embedding the HTML code aspart of the java program it becomes un-readable and difficult to understand.
2. ui developers often find it very complex to understand the HTML code written aspart of the java program, and it makes them feel complex to debug and fix ui related issues
3. For every change in HTML content, we need to rebuild, repackage and redeploy the application to have the changed reflected
4. Since the business logic and view logic is written together, they become tightly coupled and a change in business logic impacts the view logic and vice versa that makes them very difficult to maintain

To overcome the above problems, Sun Microsystems has introduced jsp api aspart of JEE platform.
JSP stands for java server pages, these are used for building dynamic HTML output/responses to the enduser. The JSP is also internally translated into an Servlet itself by the servlet container, so that upon receiving the request the servlet container executes the JSP Servlet and the output generated by the servlet would be written back to the client or web browser.
	
	
JSP helps us in constructing the dynamic web pages by using the data that is generated/computed by the servlet class. But how does the data that is computed by the servlet would be available for the jsp page inorder to render it?

That is where the Servlet Containers introduced scopes in binding the data and sharing between servlet and jsps
There are 4 scopes are defined by the Servlet containers
1. request scope
2. session scope
3. servlet context scope
4. page scope
and additionally within the jsp we can access the request data from
5. request parameters (uri request)
6. cookies
7. headers

To support accessing the data from all the above scopes, jsp has provided relevant language syntaxes and implicit objects
implicit objects:-
1. request
2. session
3. application
4. out

syntaxes:-
1. jsp expression ${variableName}	 or ${scope.variableName}
retrives the variable from any of the scopes or from specified scope

2. scriplet tags
using scriplet tags, we can write java code directly aspart of the jsp page in reading the values from the scope and can render
<%
  String val = request.getAttribute("key");
	out.println(val);
%>

3. declarative tags to define variables
<%! String message = "Good old days!"%> = is used for declaring an instance variable aspart of the jsp page

4. jstl tag libraries using which we can access the data from the scopes and render aspart of the jsp page to avoid writing java code in jsp pages.

We can use jstl tag library for writing conditional logic and loops or iterations in rendering the dynamic data onto the web browser.

From the above we can say jsp has emerged as a strong technology through which we can handle all the aspects of rendering dynamic data aspart the HTML pages to the enduser.
--------------------------------------------------------------------------------------------------------------------------------
Jsp drawbacks:
Jsp is a legacy or very old technology and it has many problems or drawbacks of its own:
1. jsp pages doesnt support page layouts in rendering the web pages
Even though we can define header.jsp, footer.jsp and reuse them by including across all the pages, the sekeleton structure of the page would be duplicated across all the pages. If we want to modify the page structure, we need to modify all the pages of our application

2. even though we can build dynamic responses aspart of the jsp, the number of tags we need to write in constructing the dynamic response is too high and these tags are too verbosed. often developers feel very complex in writing these tags and need to spend lot of time in coding.
	
3. The Web Developers build static HTML pages, the jsp/java developers transforms these HTML into dyanmic web pages using jsp technology, while embedding the dynamic data aspart of the HTML, there is always a chance where something might be broken during this transformation that leads to
	3.1 The web developer find it often too complex to understand jsp sytaxes to fix the issues
	3.2 never the jsp pages can be modelled as static html pages and cannot be viewed in the web browser to fix the problems
	
To overcome the above problems in custructing dynamic responses, the template-based view technologies are introduced.
Thymeleaf
----------
Thymeleaf is a Template engine that allows to construct dynamic pages/contents out of the HTML, XHTML or XML directly. We dont need to write jsp pages to render dynamic data. We can render dynamic data by writing HTML page itself, the magic of translating the HTML page into dynamic response would be taken care by the Thymeleaf through namespaces concept.
	
advantages:-
	1. Thymeleaf supports prototyping, We can open an Thymeleaf HTML page in the browser as a static page, so that the web developers find it easy in designing and becomes simple to covert the static web page into dynamic pages by writing Thymeleaf attributes aspart of the them.
	2. less verbosed, when compared with jsp
	3. supports layouts
--------------------------------------------------------------------------------------------------------------------------------
How to construct the HTML pages and include Thymeleaf attributes in generating the dynamic data?

#1.
We need to create HTML or XHTML page in which we need to add Thymeleaf DTD for each page as shown below.

home.html
<!DOCTYPE html SYSTEM "http://www.thymeleaf.org/dtd/xhtml1-strict-thymeleaf-4.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:th="http://www.thymeleaf.org">
			
</html>

#2. How to display a model attribute of the spring mvc controller aspart of the Thymeleaf Page

@Controller
class WelcomeController {
	@GetMapping("/welcome.htm")
	public String welcomePage(Model model) {
		model.addAttribute("greetings", "Good Morning, welcome to gadgets world!");
		return "welcome";
	}
}

welcome.html
-------------
<!DOCTYPE html SYSTEM "http://www.thymeleaf.org/dtd/xhtml1-strict-thymeleaf-4.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:th="http://www.thymeleaf.org">
	<body>
		<p th:text="${greetings}">Welcome Message</p>
	</body>
</html>


#3. How to display request parameters aspart of the URL of the request within the Thymeleaf HTML Page?
http://localhost:8080/webstore/product?productCode=p2003

product.html
------------
<span th:text="${param.productCode}">Product Code</span>

If the parameter is multi-valued, then how to access them?
http://localhost:8080/webstore/search?category=electronics&category=fashion
<p th:text="${param.category[0]}">Category1</p>
<p th:text="${param.category[1]}">Category2</p>

#4. How to access the data from HTTP Session and render aspart of the Thymeleaf page?

@Controller	
@SessionAttributes({"today"})
class HomeController {
	@GetMapping("/home.htm")
	public String homePage(Model model) {
		model.addAttribute("today", LocalDate.now());
		return "home";
	}	
}	

<p th:text="${session.today}">Today</p>
fetch the today attribute data from the HttpSession scope

(or)
<p th:text="${#session.getAttribute('today')}">Today</p>
"#session.getAttributes()" = using #session object we can invoke any of the methods of the HttpSession object

note: all the implicit objects of jsp page can be referrenced in Thymeleaf using #object

#5. How to access the data binded to an application scope or ServletContext scope in the Thymeleaf page?
	

@Controller	
class HomeController {
	@GetMapping("/home.htm")
	public String homePage(ServletContext context) {
		context.setAttribute("message", "Good evening! Welcome to Thymeleaf");
		return "home";
	}	
}
<p th:text="${#servletContext.getAttribute('message')}">Message</p>
--------------------------------------------------------------------------------------------------------------------------------
How to work with HTML Form Submission in spring mvc while working with Thymeleaf?
While working with form submission in spring mvc, we used to write jsp pages with spring form tag library so that
	1. all the form input controls access the form data from modelAttribute and render aspart of them
	2. using form tags we can access errors from global or field level and render aspart of the jsp page
	
Now we are not using jsp technology for render the form pages, so how to perform the same operations or functionality using Thymeleaf?

class DoctorForm {
	@NotEmpty
	private String firstName;
	@NotEmpty
	private String lastName;
	@DateFormat("mm-dd-yyyy")
	@Past
	private LocalDate dob;
	@NotEmpty
	private String gender;
	@NotEmpty
	private String qualification;	
}	

@Controller
@RequestMapping("/doctor")
class DoctorFormController {
	@GetMapping("/add.htm")
	public String showAddDoctorForm(Model model) {
		DoctorForm form = new DoctorForm();
		model.addAttribute("doctorForm", form);
		return "add-doctor";
	}
	
	@PostMapping("/add.htm")
	public String addDoctor(@ModelAttribute("doctorForm") @Valid DoctorForm doctorForm, BindingResult errors, Model model) {
		if(errors.hasErrors()) {
			return "add-doctor";
		}
		// perform operation
		return "add-doctor-success";
	}
}	

errors.properties
------------------
NotEmpty.doctorForm.firstName=FirstName cannot be blank
NotEmpty.doctorForm.lastName=LastName cannot be blank
Past.doctorForm.dob=date of birth must be in past

@Configuration
@EnableWebMvc
class WebMvcConfig implements WebMvcConfigurer {
	@Bean
	public MessageSource messageSource() {
		ResourceBundleMessageSource messageSource = new ResourceBundleMessageSource();
		messageSource.setBaseName("errors");
		return messageSource;
	}
}
	
add-doctor.html
----------------
<!DOCTYPE html SYSTEM "http://www.thymeleaf.org/dtd/xhtml1-strict-thymeleaf-4.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:th="http://www.thymeleaf.org">
	<body>
		<h2>Add Doctor</h2>
		<form method="post" th:action="@{/doctor/add.htm}" th:object="${doctorForm}">
			<p th:if="${#fields.hasGlobalErrors()}" th:errors="*{global}">Global Errors</p>
				
			<label for="firstName">First Name:</label>
			<input type="text" name="firstName" th:field="*{firstName}"/>
			<p class="error" th:if="${#fields.hasErrors('firstName')}" th:errors="*{firstName}">firstName errors</p>

			<label for="lastName">Last Name:</label>
			<input type="text" name="lastName" th:field="*{lastName}"/>
			<p class="error" th:if="${#fields.hasErrors('lastName')}" th:errors="*{lastName}">lastName errors</p>
			
			<button type="submit">Add Doctor</button>					
		</form>
	</body>
</html>
-------------------------------------------------------------------------------------------------------------------------------
Thymeleaf Layouts
In a typical web application, there are headers, footers and navigation bars that seems to be common across all the pages and only the body content of the page changes from page to the page we are rendering. So if we are writing header, footer and navigation bar contents in all the pages of the application, we endup in duplicating these parts across all pages that results in severe maintainability problems.
	
Instead of duplicating the common page fragments across all the pages, the Thymeleaf has introduced Thymeleaf Page layouts. The Thymeleaf page layouts works based on concept of Dialects, let us understand Dialects to understand the pagelayouts	of thymeleaf.
	
Everything in Thymeleaf works based on Namespace/Prefix. 
<p th:text="${attribute}">content</p>
In the HTML page we write th:attributes to inject the dynamic content into the page. The Thymeleaf engine upon taking the Thymeleaf page uses Dialect for replacing the Thymeleaf attributes with the actual data.
	
The Dialect in Thymeleaf is the translator which has various PageAttributeProcessors register with it. For eg..
1. th:text 
2. th:if
3. th:unless
4. th:each
5. th:field
6. th:errors
7. th:object
8. th:action
etc

These are all the PageAttributeProcessors that are part of the Dialect. The Dialect is registered with TemplateEngine. Now when we request the Thymeleaf page, The template engine talks to Dialect which inturn identifies the Thyeleaf attributes in the page and executes the relevant PageAttributeProcessors in translating the page attributes with the actual values.
	
The Thymeleaf page layouts works based on the concept of Dialects. Thymeleaf supports 2 types of page layouts
1. Thymeleaf standard page layout
2. Thymeleaf hierarchial page layout

#1. Thymeleaf standard page layout
In standard page layout we define common parts of the page like header, footer, navigation bar into page fragments. We include these page fragments across all the pages of our application to reuse them. This is something similar to <jsp:include/> in jsp technology

advantages:-
	1. simple to use it
	2. each fragment can be developed independently and can be assembled into the pages individually
	
dis-advantage:-
	1. The page structure would be duplicated across all the pages of our application
	
#2. Thymeleaf hierarchial page layout
In the hierarchial page layout, we define a template page with placeholders for all the common parts of the page like header, footer, body, navigationbar etc. With this template we standardized the pagelayout for all the pages of the application

Now when we are creating webpages of our application we import common page-layout we created above and substitutes the placeholders with fragments, so that we are avoiding duplication of common page fragments along with page structure across all the pages of our application, due to this the maintainability of the pages is very easy

advantage:
1. There is no duplicate in page structure across the pages of our application

dis-advantage:
1. complex to understand and requires more configuration
--------------------------------------------------------------------------------------------------------------------------------
Working with standard page layout

standardpagelayout
|-src
  |-main
	  |-java
		|-resources
		|-webapp
			|-WEB-INF
				|-html
					|-home.html
					|-contact-us-html
					|-about-us.html
					|-fragments [common parts of the pages in our application]
						|-header.html
						|-footer.html
						
header.html
-----------
<!DOCTYPE html SYSTEM "http://www.thymeleaf.org/dtd/xhtml1-strict-thymeleaf-4.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:th="http://www.thymeleaf.org">
	<body>
		<div th:fragment="header">
			<h2>Page Header</h2>
		</div>
	</body>
</html>


footer.html
-----------
<!DOCTYPE html SYSTEM "http://www.thymeleaf.org/dtd/xhtml1-strict-thymeleaf-4.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:th="http://www.thymeleaf.org">
	<body>
		<div th:fragment="footer">
			<p>CopyRight 2024</p>
		</div>
	</body>
</html>

while writing every page in our application like home.html, about-us.html or contact-us.html, to include header/footer across them we need to use 
1. th:insert
2. th:replace attributes

home.html
---------
<!DOCTYPE html SYSTEM "http://www.thymeleaf.org/dtd/xhtml1-strict-thymeleaf-4.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:th="http://www.thymeleaf.org">
	 <body>
	 		<div class="container">
				<div class="row">
					<div class="col-md-12" th:insert="fragments/header.html::header">
						<!--header section-->
					</div>
					<div class="row">
						<div class="col-md-12">
							body
						</div>						
					</div>
					<div class="row">
						<div class="col-md-12" th:insert="fragments/footer.html::footer">
							<!-- footer section-->
						</div>
					</div>					
				</div>
			</div>	 
	 </body>
</html>


public SpringTemplateEngine templateEngine(SpringResourceTemplateResolver templateResolver, MessageSource messageSource) {
	SpringTemplateEngine templateEngine = new SpringTemplateEngine();
	templateEngine.setTemplateResolver(templateResolver);
	templateEngine.setMessageSource(messageSource);
	templateEngine.addDialect(new LayoutDialect()); // standard layout dialect
	return templateEngine;
}
--------------------------------------------------------------------------------------------------------------------------------
#2. Hierarchial Layout
In Hierarchial layout we need to create a template page with all the common fragments/parts defined in it and declare placeholders for the content. The placeholder will be replaced with actual content while render the pages.
	
templates/common-template.html
<!DOCTYPE html SYSTEM "http://www.thymeleaf.org/dtd/xhtml1-strict-thymeleaf-4.dtd">

<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:th="http://www.thymeleaf.org" 
				xmlns:layout="http://www.ultraq.net.nz/thymeleaf/layout">
<head>
    <meta charset="UTF-8">
    <title>Common Template</title>
</head>
<body>
<div class="container">
    <div class="row">
        <div class="col-lg-12" layout:fragment="header">
            <h2>Hierarchial Page Layout</h2>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-12" layout:fragment="body">
            should be replaced by the respective pages.
        </div>
    </div>
    <div class="row">
        <div class="col-lg-12" layout:fragment="footer">
            A copyright notice, either as © c circled copyright symbol or phrase, informs users of the underlying claim to
            ownership credit for a published work
        </div>
    </div>
</div>
</body>
</html>


about-us.html

<!DOCTYPE html SYSTEM "http://www.thymeleaf.org/dtd/xhtml1-strict-thymeleaf-4.dtd">

<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:th="http://www.thymeleaf.org" 
				xmlns:layout="http://www.ultraq.net.nz/thymeleaf/layout"
      layout:decorate="~{template/common-template.html}">
<div layout:fragment="body">
    About us page content
</div>
</html>
--------------------------------------------------------------------------------------------------------------------------------
How to display the data based on conditions?
Like <c:if test="${expression}">block</c:if> in JSTL c tag library, similarly how do we do the same in Thymeleaf?
	
9-10 = Exceptional
7-8 = Good
5-6 = Average
0 - 5 = Poor

reviews.html
------------
<!DOCTYPE html SYSTEM "http://www.thymeleaf.org/dtd/xhtml1-strict-thymeleaf-4.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:th="http://www.thymeleaf.org">
	<body>
		<p>ProductName <span th:text="${product.productName}">Product Name</span></p>
		<p>Description <span th:text="${product.description}">Description</span></p>
		<p>Price <span th:text="${product.price}">price</span></p>
		<p>
				Ratings <span th:text="${product.rating}">Rating</span>&nbsp;
				<span th:if="${product.rating >= 9}">Exceptional</span>
				<span th:if="${product.rating >= 7 && product.rating <= 8}">Good</span>
				<span th:if="${product.rating >= 5 && product.rating <= 6}">Average</span>
				<span th:if="${product.rating < 5}">Poor</span>
		</p>
	</body>
</html>

@Controller
class ProductReviewController {
	@GetMapping("/review.htm")
	public String productReview(Model model) {
		Product product = new Product();
		// populate data
		model.addAttribute("product", product);
		return "reviews";
	}
}

<p th:unless="${expression}">do this</p>
--------------------------------------------------------------------------------------------------------------------------------
How to display collection of values on the Thymeleaf page?
Like <c:forEach items="" var=""></c:forEach>

<p>Features:
    <ul th:each="feature:${product.features}">
        <li th:text="${feature}">Feature</li>
    </ul>
</p>