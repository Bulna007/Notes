Relationship Mappings
---------------------
In a real-world application always the tables within the RDBMS database carries relationship between them, interms of primary keys and foreign keys

For eg.. we have person and address table

person 
person_no (pk)  person_nm  age  gender  mobile_nbr  email_address

address
address_no (pk) address_line1  address_line2  city  state  zip  country 

The relationship between the data across these 2 tables are one person can have multiple address and an address always belongs to only one person which is "one-to-many & many-to-one". To establish the relationship between the 2 tables we need to write person_no (pk) as a foreign key in address table

person 
person_no (pk)  person_nm  age  gender  mobile_nbr  email_address

address
address_no (pk) address_line1  address_line2  city  state  zip  country  person_no (fk)
	
while working with hibernate we want to perform database operations on these underlying tables interms of Objects, so we need to model the relational database tables along with their relationship interms of object model

person 
person_no (pk)  person_nm  age  gender  mobile_nbr  email_address
100             blake      34   Male    938484949   blake@yahoo.com

address
address_no (pk) address_line1  address_line2  city      state  zip   country  person_no
10              5th Street     Pkwy Street	  Hyderabad	TS     92833 India    100
11              23/9/3, T2     Amy Towers     Hyderabad TS     93839 India    100
	
class Person {
	int personNo;
	String personName;
	int age;
	String gender;
	String mobileNo;
	String emailAddress;
	// accessors
}	

class Address {
	int addressNo;
	String addressLine1;
	String addressLine2;
	String city;
	String state;
	int zip;
	String country;
	// accessors
}
For eg. while modelling the tables interms of classes, we create one entity class per one table so that the records the table can be mapped/accessed interms of objects. But now the database tables are not independent of each other, rather they carry relationship between them, so while performing operations on the underlying tables, we want to persist/retrieve the data along with their relationships as well.
	
For eg..
#Reading/Accessing
when we tried accessing the data for the Person of id #100 one would expect to retrieve along with person data all the corresponding address that belongs to that person as well

Person person = session.get(Person.class, 100);
Hibernate should be able to query the data from person table along with address table as well and wrap those addresses into the person object representing the database relationship and should return
	
For this to take place the developer has to model the database table relationships appropriate interms of class relationships for eg..
within the person we should declare collection of Address objects representing these address belongs to this person based on table relationship as below.
	
	
class Person {
	int personNo;
	String personName;
	int age;
	String gender;
	String mobileNo;
	String emailAddress;
	
	Collection<Address> addresses;
	
	// accessors
}	
just by declaring relationship between the entity classes hibernate will not know how to fetch the data for that collections/relationship objects. The programmer has to tell the hibernate how to retrieve the data for that relationship objects as well through mappings, which are called relationship mappings

How many ways the database tables can be related with each other?
There are 3 types of relationships could exist between the database tables
1. one-to-one
	1.1 direct one-to-one
	1.2 one-to-many as one-to-one
2. one-to-many/many-to-one
3. many-to-many

How many ways we can represent the relationship between the classes on object oriented programming model?
There are #2 types of relationships are there
1. Inheritance
	1.1 Generalization
	1.2 Specialization
	1.3 Realization
	
2. Association
	2.1 Assocation
	2.2 Aggregation
	2.3 Composition
	
when we have tables with relationships between them, when we fetch the records of data from these tables based on their relationship, they should be stored interms of objects representing their relationships, for this we need to map relation between the tables interms of object relationships
From the above we can understand the database table relationships can be expressed interms of classes in #2 ways either in Inheritance relationship or Assocation relationship that is where we have 2 types of relationship mappings supported by Hibernate/Jpa or ORM technology Framework or apis

1. Inheritance Mapping Model
2. Assocation Mapping Model
--------------------------------------------------------------------------------------------------------------------------------------
1. Inheritance Mapping Model
Inheritance Mapping model is about how to map or model the Inheritance relationship between the entity classes interms of table relationships is called "Inheritance Mapping Model".