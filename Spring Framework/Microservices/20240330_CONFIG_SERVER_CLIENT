What is spring cloud config server, Why do we need to use it?
While working on Microservices applications, we run multiple instances of these applications across the nodes of the cluster for high-availability and Scalability. In case if we are packaging the configuration information pertaining to the microservice applications inside the application itself by writing an application.properties or application.yml we run into several problems:

1. every change in the configuration information requires an rebuild, repackage which produces the new version of the application or artifact
2. we need to identify on which nodes of the cluster the replicas of the microservices applications are running and should replace them with the new version of the application, and it is an very difficult job
3. while rolling the new version of the application, we need to use roll-out strategies to avoid downtime of the application
4. incase if we are packaging and delivering the microservice applications using containerization technology, every change in the configuration not only requires and rebuild of the application, for each new version of the artifact being produced, we need to again package the application into a new container image and rollout
5. significant amount of efforts and coordination is required between development and devops teams for rolling out these configurations changes across the nodes of the cluster

From the above we can understand a small configuration change requires huge time, team coordination, huge cost in rolling the changes, impact on the availability and performance of the application, so inorder to overcome these problems spring cloud has introduced spring cloud config server

Instead of packaging the configuration within the application, we externalize the configuration and distribute across the instances of the microservices applications that are running on the cluster centrally through the help of cloud config server.
-------------------------------------------------------------------------------------------------------------------------------
	
Let us try to understand if spring cloud has not provided an Spring Cloud ConfigServer, How do we accomplishing in centralizing and distributing the Configuration information:

To centralize and distribute the configuration information we need to build an Spring Boot Application, in which we need to build an HTTPEndpoint, that will receive the request over the network with microservice application name as an input. This endpoint looks for the appropriate configuration pertaining to the microservice and dispatches it over the network back to the application that has requested.
	
To the ConfigEndpoint we need to pass the location of Configuration files or Repo as an input, so that during the boottime of the ConfigApplication, it reads all the configurations from the location and caches or loads into memory, so that upon receiving the request for a configuration, it can quickly dispatch the configuration to the requested application

How does the ConfigServer Endpoint knows which configuration is pertaining to which Microservice and how does the ConfigEndpoint knows which microservice is requesting?
1. Each Microservice application must and should have an unique name associated with it
2. While an Microservice goes to the ConfigEndpoint requesting the configuration, it has to pass the name of the microservice as an input, so that ConfigEndpoint can identify which application is requesting the configuration
3. For each microservice the relevant configuration should be written in the corresponding .properties|.Yaml file and place in config repo, so that ConfigEndpoint can identify the configuration of the microservice when requested.
	
Taking the above things into Consideration, we need to build an spring boot application, that exposes an ConfigEndpoint that distributes the Configuration information across the microservice applications whoever has requested. We need to spend lot of time in building the application from scratch and the efforts and time needed in developing is very high. 
	
It looks like not for our microservice application, for every microservice application centralizing the Configuration and distributing it across seems to be an common requirement, so instead of we building this the spring cloud people has provided ConfigServer.
	
	
How to develop the spring cloud config server application?
To centralize and distribute the configuration over the network to the microservices applications, the spring cloud has provided spring cloud config server, it is nothing but an HTTPEndpoint

1. setup an Config repository with microservice application configurations aspart of it
We can setup a directory on the Filesystem of the computer as an Configuration repository, and we can initialize an empty git repository using
$USER_HOME/configrepo
git init

2. place the microservice configurations inside the $USER_HOME/configrepo directory. For eg.. if the microservice application name is inventory-mgmt, then configuration corresponding to it should be placed with name as inventory-mgmt.yml

$USER_HOME/configrepo
|-inventory-mgmt.yml

here we dont have to write the entire configuration of the microservice application, identify which configuration might change and those configurations only inside this YAML file so that changes to these configurations can be overriden and distributed easily

3. setup an spring boot, spring cloud application to host ConfigServer endpoint
By setting up spring boot application the auto configurations takes care of creating/configuring
1. DispatcherServlet
2. HandlerMappings
3. MessageConverters
4. Validators
etc

Even the ConfigServer endpoint is also pre-built and shipped aspart of spring-cloud dependencies, all that we need to do is enable the ConfigServer endpoint by populating the configrepo location to it

ConfigServer
|-src
  |-main
	  |-java
			|-ConfigServerApplication.java
		|-resources
			|-application.yml
|-pom.xml
  - parent: org.springframework.boot:spring-boot-starter-parent:3.1.5
		dependencies:
			- spring-boot-starter
			- spring-cloud-config-server


@SpringBootApplication
@EnableConfigServer
public class ConfigServerApplication {
	public static void main(String[] args) {
		SpringApplication.run(ConfigServerApplication.class, args);
	}
}

application.yml
----------------
server:
	port: 9099	
spring:
	cloud:
		config:
			server:
				git:
					uri: file://${user.home}/configrepo
--------------------------------------------------------------------------------------------------------------------------------
How to use the configuration information that is published aspart of the ConfigServer within a Microservice application?

The Microservice application inorder to use the configuration that is published by the ConfigServer, it should be able to pull the configuration during the bootstrap of the microservice application, after the environment object has been created, before ioc container instantiates the bean definitions, 

Since the microservice applications are spring boot applications, the SpringApplication class itself takes care of bootstrapping the application by performing various activities as defined below.

SpringApplication.run(Application.class, args):
1. create an empty environment object
2. detects and loads the external configuration of our application into the env object created above
3. print banner
4. detects the WebApplicationType based on the classpath dependencies and instantiate appropriate ioc container
   1. if Web Mvc jar dependencies are found under the classpath, then WebApplicationType = WEB and instantiates
	 		AnnotationConfigServletWebServerApplicationContext
   2. if WebFlux jar dependencies are found, then WebApplicationType=REACTIVE and instantiates
	 		AnnotationConfigReactiveWebServerApplicationContext
   3. else WebApplicationType = NONE and instantiates
	 		AnnotationConfigApplicationContext
5. detects and register spring factories by instanting them
6. Invokes ApplicationContextInitializer
7. prepareContext
8. refreshContext
9. Invokes CommandLineRunners and ApplicationRunners
10. during the above stages of bootstrapping, it will publish the events and invokes the appropriate listeners

From the above we can understand the SpringApplication class itself takes care of creating the env object, detects and loads the external configuration from various different sources like
1. FileSystem (application.properties|application.yml) that is placed under
	1.1 classpath
	1.2 classpath/config
	1.3 projectroot/config
	1.4 projectroot
2. Environment Variables
3. JVM System Properties
4. Environment variable SPRING_APPLICATION_JSON containing key/value properties

In case of microservice applications, the configuration information about them will not be available locally, rather the configuration is published aspart of CloudConfig Server. So we wanted to make an HTTP call to the ConfigServer in pulling and loading the configuration into our microservice application

Can the SpringApplication class can take the responsibility of invoking the ConfigServer and load the configuration into the env object of our application?
The SpringApplication class doesnt performs the activity of invoking the ConfigServer and pulls and loads the configuration into our application because:
every spring boot application doesnt externalize the configuration information in the cloud configserver, incase of microservices applications only since we run multiple instances of them across the nodes of the cluster to easily manage and distribute the configuration we use ConfigServer

if SpringApplication class itself is bearing the responsibility of reading the configuration from ConfigServer, it will become an additional overhead for every boot application which is unnecessary

Then how to pull and load the Configuration from Cloud ConfigServer into a Spring Boot Microservice application?
If SpringApplication class itself should not pull the configuration from ConfigServer, then spring boot should have provided an extension point or an external hookup through which we can get the Configuration being loaded from external source like ConfigServer

SpringApplication class, during the bootup will locate an bootstrap context (ioc container) available within the application, if exists it will create an ioc container by inheriting from the bootstrap context as an parent ioc container, so that we can plugin our own machanism of loading the configuration from any external source and place it in bootstrap context ioc container.
	
From the above we can understand we need to do #2 things
1. we need write an HTTP/Rest client program that invokes the ConfigServer and pull the configuration
2. We need to write one more component that gets executed during the time of bootstrapping the spring boot application, before SpringApplication class begins execution in our application, this component should make use of HTTP/Rest client program and access the configuration from ConfigServer, create an bootstrap context and loads the configuration into it. so the SpringApplicaiton class can pick the Bootstrap context and nest it as parent ioc container
	
Looks like every microservice application during the bootstrapping needs to pull the configuration from config server and loads into bootstrap context which is an common requirement. instead of we implementing it, spring cloud itself has provided these components to us
1. spring-cloud-config-client = http/rest client program to pull the configuration from ConfigServer
2. spring-cloud-bootstrap = initializer that make use of Config-client to pull the microservice configuration and loads into Bootstrap context


When we add bootstrap dependency inour application, it creates an bootstrap context by reading bootstrap.yml|properties file incase if this is not available, it looks for application.yml|properties file and reads the ConfigServer URI and pulls the configuration using spring cloud ConfigClient.
	
application.yml|properties
---------------------------
Write the application configuration which is not going to change during runtime (static). In this file, it is mandatory to write applicationName for pulling the configuration from ConfigServer
spring:
  application:
    name: inventory-mgmt
		
server:
  port: 8081
		
bootstrap.yml
--------------
spring:
  cloud:
    config:
      uri: http://localhost:9099/