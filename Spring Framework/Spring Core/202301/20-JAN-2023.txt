#1. Favor composition over inheritance
it is recommended to use composition most of the time for reusing the functionality of one class in another class, rather than using inheritance, because there are limitations or drawbacks we run into if we use inheritance

1. Most of the realtime usecases are solvable through composition rather than inheritance, because a class wants to use only few of the functionalities of another class, very rarely a class wants to reuse all the functionalities of another class. So in such case we need to use composition only

2. Many programming languages doesnt support multiple inheritance, due to which if a class has to use functionality of multiple other class, we need to must and should use composition only

3. inheritance makes the classes more fragile whereas if we use composition the class will become less fragile
In case of inheritance if there is a change in super class, it not only affects the sub-class, along with that it affects all the other classes which are using the subclass as well.
In case of composition if there is a change in dependent class, it only affects the class using which is using the functionality, but will not affect or atleast can be controllable to not to affect other class of our application.
	
4. Inheritance doesnt support testability of the code, where as composition makes the classes easily testable