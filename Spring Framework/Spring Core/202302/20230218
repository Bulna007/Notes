class MessageWriter {
	private IMessageConverter messageConverter;
	void writeMessage(String message) {
		String cMessage = null;
		
		cMessage = messageConverter.convert(message);
		System.out.println(cMessage);		
	}	
	public void setMessageConverter(IMessageConverter messageConverter) {
		this.messageConverter = messageConverter;
	}
}

interface IMessageConverter {
	String convert(String message);
}
class HTMLMessageConverterImpl implements IMessageConverter {
	String convert(String message) {
		return "<html><body>"+message+"</body></html>";
	}
}
class PDFMessageConverterImpl implements IMessageConverter {
	String convert(String message) {
		return "<pdf>"+message+"</pdf>";
	}
}

class Test {
	public static void main(String[] args) {
		MessageWriter messageWriter = new MessageWriter();
		IMessageConverter messageConverter = new HTMLMessageConverterImpl();
		messageWriter.setMessageConverter(messageConverter);
		
		messageWriter.writeMessage("Welcome to Spring Framework");
	}
}

application-context.xml
------------------------
<?xml version="1.0" encoding="utf-8"?>
<beans>
	<bean id="messageWriter" class="com.sc.beans.MessageWriter">
		<property name="messageConverter" ref="pdfMessageConverter"/>
	</bean>
	
	<bean id="htmlMessageConverter" class="com.sc.beans.HTMLMessageConverterImpl"/>
	<bean id="pdfMessageConverter" class="com.sc.beans.PDFMessageConverterImpl"/>
</beans>



BeanFactory = is an factory class, that takes care of creating the object for the bean definition we asked. To the BeanFactory we need to pass spring bean configuration file as an input, so that it can read the configuration and can identify the bean definition we have requested and create the object for it

There are 2 ways we can pass an file as an input to a class within our application
	1. absolute path = if the file or resource is located outside the project then we need to use absolute path, absolute paths are often used while production.
	
	2. relative path = if the file or resource is located within the classpath of the project, then we can refer the file using relative path. relative paths are more convinient during development 
	
BeanFactory (interface)
|-DefaultListableBeanFactory
|-XMLBeanFactory

BeanFactory beanFactory = new XMLBeanFactory(new ClassPathResource("com/sc/common/application-context.xml"));
BeanFactory beanFactory = new XmlBeanFactory(new FileSystemResource("d:\\application-context.xml"));

There are 2 helper classes are provided by spring developers
Resource (interface)
- ClassPathResource  = ClassLoader.getResourceAsStream("");
- FileSystemResource = new FileInputStream(new File(""));


class Test {
	public static void main(String[] args) {
		MessageWriter messageWriter = (MessageWriter) beanFactory.getBean("messageWriter");
		
		messageWriter.writeMessage("Welcome to Spring Framework");		
	}
}