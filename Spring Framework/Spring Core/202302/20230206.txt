class MessageWriter {
	IMessageConverter messageConverter;
	void writeMessage(String message) {
		String cMessage = null;
		
		messageConverter = MessageConverterFactory.newMessageConverter("html");
		cMessage = messageConverter.convert(message);
		System.out.println(cMessage);
	}
}
interface IMessageConverter {
	String convert(String message);
}
class HTMLMessageConverterImpl implements IMessageConverter {
	String convert(String message){
		return "<html><body>"+message+"</body></html>";
	}
}
class PDFMessageConverterImpl implements IMessageConverter {
	String convert(String message) {
		return "<pdf>"+message+"</pdf>";
	}
}
class Test {
	public static void main(String[] args) {
		MessageWriter messageWriter = new MessageWriter();
		messageWriter.writeMessage("welcome to strategy design pattern");
	}
}

If my class is creating the object of another class, then my class will run into #2 problems
1. my class will using the concreate classname of another class in creating the object, so that my class will become tightly coupled with another class
2. my class has to write complex instantiation logic in creating the object of another class, so that in future the instantiation process has been changed, then all the classes including my class will be impacted
	
so the above problems are caused while our class is creating the object, so let us not create let someone create the object so that we can use it.
	
Factory design pattern:
Factories are used for creating the object of another class, there are 2 main reasons or advantages of using the factory classes.
1. without using the classname of another class, our class can take the help of factory in getting the object
2. without bothering about how to create the object of another class, our classes in the application can get the object of another class using factory
	
class MessageConverterFactory {
	static IMessageConverter newMessageConverter(String converterType) { # static factory method
		IMessageConverter messageConverter = null;
		
		if(converterType.equals("html")) {
			messageConverter = new HTMLMessageConverterImpl();
		}else {
			messageConverter = new PDFMessageConverterImpl();
		}
		return messageConverter;
	}
}	

Dependency Pulling:
The process of acquiring or taking the dependent object(s) from another class is called dependency pulling. Here MessageWriter is pulling the dependent object (HTML|PDF Converters) from MessageConverterFactory
In case of pulling, we need to tell the other class which object we want, so that again our class will become tightly coupled through logical classname.