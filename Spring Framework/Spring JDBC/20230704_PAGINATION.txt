2. rollup logic

student
student_no  student_nm   age   gender   mobile_no   email_address   qualification
1           alex         24    Male     938374844   alex@gmail.com  MCA
2           smith        23    Male     938484748   smith@gmail.com BTech

course
course_no  course_nm   duration  fee
1          core java   6         4000
2          adv java    7         6000
3          spring frmk 8         8000
4          hibernate   4         5000
	
student_course
student_no  course_no
1           1
1           2
1           3
2           3
2           4
	
give me all the students along with the courses they joined in
select * from student s inner join student_course sc on s.student_no = sc.student_no inner join course c on sc.course_no = c.course_no order by s.student_nm;

1           alex         24    Male     938374844   alex@gmail.com  MCA  1  core java  6 4000
1           alex         24    Male     938374844   alex@gmail.com  MCA  2  adv java   7 6000
1           alex         24    Male     938374844   alex@gmail.com  MCA  3  spring frmk 8 8000
2           smith        23    Male     938484748   smith@gmail.com BTech	3  spring frmk 8 8000
2           smith        23    Male     938484748   smith@gmail.com BTech	4  hibernate 4 5000

class Student {
	int studentNo;
	String studentName;
	int age;
	String gender;
	String mobileNo;
	String emailAddress;	
	
	Set<Course> courses;
	
	//accessors
}

class Course {
	int courseNo;
	String courseName;
	int duration;
	double fee;
}

@Repository
class StudentDao {
	private final String SQL_GET_STUDENTS_WITH_COURSES = "select s.student_no, s.student_nm, s.age, s.gender, s.mobile_no, s.email_address, s.qualification, c.course_no, c.course_nm, c.duration, c.fee from student s inner join student_course sc on s.student_no = sc.student_no inner join course c on sc.course_no = c.course_no order by s.student_nm";
	
	@Autowired
	private JdbcTemplate jdbcTemplate;
	
	
	public List<StudentBo> getStudentsWithCourses() {
		return jdbcTemplate.query(SQL_GET_STUDENTS_WITH_COURSES, new StudentCourseResultSetExtractor());
	}
	
	private final class StudentCourseResultSetExtractor implements ResultSetExtractor<List<StudentBo>> {
		public List<StudentBo> extractData(ResultSet rs) {
			List<CourseBo> courses = null;
			Map<Integer, StudentBo> studentCourseMap = new HashMap();
			int studentNo;
			StudentBo studentBo = null;
			CourseBo courseBo = null;
			
			while(rs.next()) {
				studentNo = rs.getInt(1);
				if(studentCourseMap.containsKey(studentNo) == false) {
					studentBo = new StudentBo();
					studentBo.setStudentNo(rs.getInt(1));
					studentBo.setStudentName(rs.getString(2));
					studentBo.setAge(rs.getInt(3));
					// populate student data
					courses = new ArrayList();
					studentBo.setCourses(courses);
					studentCourseMap.put(studentNo, studentBo);
				} else {
					studentBo = studentCourseMap.get(studentNo);
				}
				
				courseBo = new CourseBo();
				courseBo.setCourseNo(rs.getInt(7));
				courseBo.setCourseName(rs.getString(8));
				coursebo.setDuration(rs.getInt(9));
				courseBo.setFee(rs.getDouble(10));
				studentBo.getCourses().add(courseBo);				
			}
			return studentBo;
		}
	}	
}