2. JSON Streaming
------------------
2.1 Read
Streaming api allows us to read the data from json document in pull-based event mechanism. unlike the parsing api, that converts the entire json data into in-memory object model while reading/writing, the streaming methodology allows us to read the data from json document sequentially.
	
it places an pointer to the top of the document, allows us to read the document by incrementing the pointer from top to the bottom one after the another and pulls the event.
Based on the event Type we can read the data from the Parser. The eventType can be
1. KEY_NAME
2. VALUE
3. START_OBJECT
4. END_OBJECT
5. START_ARRAY
6. END_ARRAY
etc

JsonParser is the class provided by javax json api, to help us in reading the data from json document using streaming methodology

JsonParser jsonParser = Json.createParser(new FileInputStream(new File("d:\\product.json")));
while(jsonParser.hasNext()) {
	Event event = jsonParser.next();
	if(event == Event.KEY_NAME) {
		keyName = jsonParser.getString();
	}
}

#2.2 How to write the json data using streaming api?
in json parsing methodology, we need to create the json data as an in-memory object representation format and pass it as an input to JsonWriter, that takes huge memory.
	
unlike the parsing api, the streaming api has provided an way to directly write the json data to the outputstream or destination without building in-memory representation.
	
JsonGenerator is the class used for writing the json data directly without any object model representation as below.
	
JsonGenerator jsonGenerator = Json.createJsonGenerator(System.out);
jsonGenerator.writeStartObject(); 
jsonGenerator.add("key1", "value1");
jsonGenerator.add("key2", "value2");
jsonGenerator.add("key4", "value3");
jsonGenerator.writeEnd();
jsonGenerator.close();
--------------------------------------------------------------------------------------------------------------------------------------
Json Binding
If we want to read the json data we can use json parsing or json streaming api, but if we want to collect the data into an java object format, then we need to endup in writing complex logic in reading the data by using any one of these apis and bind the data into java object. similary we need to write complex logic in coverting java object data into json structure using these apis.

class Address {
	String addressLine1;
	String addressLine2;
	String city;
	String state;
	int zip;
	String country;
}

{
  "addressLine1": "Brigade Road",
  "addressLine2": "Pwky Street, 6th Lane",
  "city": "Columbus",
  "state": "Ohio",
  "zip": 3844,
  "country": "USA"
}
	
instead of we writing the logic for converting the json data into object and vice versa we can use binding api.
In json we have 2 type of data structures in representing the data either as json object or json array. to hold the data interms of java language representation, we just need corresponding data structures created in java like
for a json object we need a java class representing the same structure of the json object. similary for an json array we need to use collection/arrays to hold the data

since the 2 worlds are identical and has similar type of data structures we can easily port the data from json to java class object formats. 
	
The javax json binding api has provided a class called Jsonb which stands for "json binding", that takes care of coverting the json data into java object/array format depends on the structure.
The process of converting the json data into java object/array format is called "unmarshalling"
The process of converting java object/array into json data format is called "marshalling"
	
if there is a mis-match between the properties of json and java attributes we can use @JsonProperty annotation to map the fields.	
{
  "address_line1": "Brigade Road",
  "address_line2": "Pwky Street, 6th Lane",
  "city": "Columbus",
  "state": "Ohio",
  "zip": 3844,
  "country": "USA"
}

class Address {
	@JsonProperty("address_line1")
	String addressLine1;
	@JsonProperty("address_line2")
	String addressLine2;
	String city;
	String state;
	int zip;
	String country;
}
	
#1. how to read the json data into java object?
	Jsonb jsonb = JsonBuilder.create();
	Address address = jsonb.fromJson(new FileInputStream(new File("d:\\address.json")), Address.class);

#2. how to write the json data from an java object?
	Jsonb jsonb = JsonBuilder.create();
	Address address = new Address();
	// populate data into address
	jsonb.toJson(System.out, address);