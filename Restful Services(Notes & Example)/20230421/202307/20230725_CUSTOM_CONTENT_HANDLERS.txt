Custom Content Handlers
-----------------------
The jaxrs runtime has provided in-built content handlers to support receiving the data that is send aspart of the Request Body within the resource method or dispatching the data aspart of the Response body when a returnValue has been returned by the Resource Method.
	
Supported Parameter Types:	
1. InputStream
2. Reader
3. byte[]
4. File
5. MultiValuedMap
6. String

Supported Returntypes:
1. StreamingOutput
2. byte[]
3. String
4. File

using the above parameterTypes/returnTypes being declared in resource methods, we can read/return raw representation of the data from the Resources (raw representation means in the underlying data format: json, yaml, xml etc). 
	
The Raw representation means, if the data is send within the request body in json/xml/yaml format, then the resource class methods will receive the data in that respective format directly. Inside the resource method we need to write the code for extracting the data using data extraction apis and use the data for performing business logic

through the business logic we compute and produce the output data, that should be returned to the client application again in data representation format aspart of the response body. To do that again we need to construct the data that is produced out of the business logic in raw representation format again using data extraction apis and return/dispatch it to the client

With the above approach there are plenty of problems are there:
1. our business logic written inside the resource methods is exposed to the underlying data representation format due to which
	1.1 the business logic can work only for that data representation only, if the underlying data representation has been changed, we need to not only modify data extraction logic, we need to modify business logic also
	1.2 since the business logic is working directly on raw representation, if the structure/semantics of the data being send is changed again there is an impact on business logic
	1.3 if we want to switch/change the data extraction api, there is an impact on business logic
	
2. The apis we build works only for one data representation format only, if we want to make the api works for different data representation formats for different types of clients, we need to duplicate the api

3. The data extract logic would be duplicated across the resource classes and methods

From the above we understand, dont build the business logic to work around raw representation of the data, rather the business logic should always take the data as an input interms of objects, using which perform operation and produce object of data only. So that your business logic will be agnostic to the data representation format.