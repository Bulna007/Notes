1. settings.gradle
The settings.gradle is an entry point of every gradle project. The primary purpose of settings.gradle is to declare sub-projects or modules to you build.
	
For single-project build, the settings.gradle is optional
For multi-module project builds, the settings.gradle is mandatory and have to declare all the sub-projects inside it. There must be only one settings.gradle per one project.
	
Within the build lifecycle at initializaionPhase the gradle build finds the settings.gradle in the root of the project directory, and creates an Settings object representing the configurations written aspart of it.
	
All the configurations represented or written aspart of the settings.gradle files goes implicitly into settings object.. The settings object exposes standard properties in the settings script file as below

1. buildCache
2. plugins
3. rootDir
4. rootProject
5. settings


settings.gradle
#1.
pluginManagement {
	repositories {
		gradlePluginPortal()
	}
}

#2. 
plugins {}

#3. rootProject.name=""
	
#4. 
dependencyResolutionManagement {
	repositories {
		mavenCentral()
	}
}	

#5. 
include("sub-projects")
	
	
2. gradle.properties
gradle.properties holds the project related configuration information that contains standard key/value pair through which we can customize the behavior of the build.
	
3. global configurations
Gradle uses #2 main directories to manage its work
1. Gradle user home directory
2. Project root directory

1. Gradle user home directory
By default gradle user home directory is ~/.gradle or c:\Users\$USER\.gradle, in which it stores global configuration properties, initialization scripts, caches and log files

GRADLE_HOME = the directory where gradle has been installed
GRADLE_USER_HOME = per each user of the machine, the gradle creates an gradle home directory under user_home directory, in which it stores the information related to the builds and configurations pertaining to that user


The structure of the gradle user home directory
~/.gradle
|-caches
	|-4.8
	|-4.9
	|-..
	|-jars-3
	|-modules
|-init.d
|-wrapper
	|-dists
		|-gradle-4.x-bin
		|-gradle-5.x-bin
|-gradle.properties


4. project root directory
project (directory) 
|-.gradle
|-build
|-gradle
	|-wrapper
	|-gradle-wrapper.properties
|-gradle.properties
|-gradlew
|-gradle.bat
|-settings.gradle
|-sub-project1
	|-build.gradle
|-sub-project2
	|-build.gradle



1. .gradle = project specific cache directory generated by the gradle
2. build = the build artifacts are generated and placed in build/ directory
3. gradle = contains jar file and configuration files of gradle wrapper
4. gradle.properties = project-specific gradle configuration properties
5. gradlew or gradle.bat = scripts for executing builds using gradle wrapper
6. settings.gradle = sub-projects information

5. Gradle Wrapper
The recommended way of building the gradle projects is using Gradle Wrapper. It provides lot of benefits as below
1. standardizes a project on a given gradle version
2. provisions the same gradle version for different users
3. provisions the same gradle version for different execution environments (IDEs, CI Servers)
	
Working with java tool chain
Working on multiple projects can require multiple versions of the java. Gradle by default detects the system jdk and uses it for running the gradle engine and even for performing the build of the project. But sometimes this is not desirable and may require a different version of java to be used for building 

In order to build the project with different jdk other than the installed one, we can use gradle toolchain options.
	
build.gradle
java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

Now when we execute the build with above configuration, it performs several tasks
1. gradle configures all compile, test and javadoc tasks to use the defined toolchain
2. Gradle detects locally installed toolchains
3. Gradle chooses a toolchain matching the requirements 
4. if no matching toolchain is found, gradle automatically downloads a matching one based on the configured toolchain from repositories.
	
along with build.gradle in settings.gradle we need to define toolchain repositories as below

settings.gradle
---------------
plugins {
    id 'org.gradle.toolchains.foojay-resolver' version '0.7.0'
}
toolchainManagement {
    jvm {
        javaRepositories {
            repository("foojay") {
                resolverClass = org.gradle.toolchains.foojay.FoojayToolchainResolver
            }
        }
    }
}
------------------------------------------------------------------------------------------------------------------------------------

How to work with multi-module gradle project?
	












































































