Microservices
-------------
Microservices is not an api/library or not even an programming language. It is an methodology or architectural style being adopted in developing enterprise large-scale complex business systems. The methodology or architectural style comprises of best practices, standard guideliness/recommendations and design patterns to be followed in building the enterprise large-scale application

Microservice architecture demonstrates/encourages us to break down the large-scale complex enterprise system into smaller services based on below characteristics:
1. loosely coupled:
1.1 Each Microservice application should be built out of its own source code project/repository independent of others
1.2 Microservices applications should not be referring or expressing as library/classpath dependencies of other microservices within the system which means:
    1.2.1 No #2 components of the #2 different microservice applications should talk to each other holding the interfaces of others, if any microservice is referring to another microservice by holding an interface of another, then these #2 microservices are said to be tightly coupled with each other resulting dependency/maintainance problems
		The only way a microservice component communicates with another microservice component of another application is through api calls only.
1.3 there should not be any build order dependencies across the microservice applications

Why loosely coupled:
Each microservice application can be developed by its own independent and isolated teams having their own sprints and release management activities planned/scheduled that accelerates the development of the whole system and reduces the cost of developing

2. independently deployable
Each microservice should be running out of its own container, isolated from other microservices.
advantages:-
	1. A load on one microservice will not affect or impact the other microservice as each one of them is running on its own idependent container
	2. upgrading, patching a microservice will not affect the availability of the other
	3. if one microservice has been crashed due to some reasons, it will not affect the availability of others
	
3. Highly Scalable
since each microservice applications is loosely-coupled and independently deployable out of its own container environment, we can easily scale a specific microservice module of the system based on the demand rather than scaling the whole system, thus it supports "vertical scaling".
		
4. collaborative services
each microservice can communicate with another microservice in reusing the functionality between each other by exchanging api calls between them, hence those are collaborative

5. resilient
able to handle and recovery quickly out of the failures

6. highly available
no matter, these services should be always available and accessible

so that these can be developed by multiple smaller mutually collaborating teams independently, thus accelerating the development/delivery of the software system.
--------------------------------------------------------------------------------------------------------------------------------Developers has to understand the architectural principles / patterns / recommendations/guidelines in building the microservices based applications. Understanding these architectural principles/patterns and designing/developing the system from the scratch seems to be quite complex and we need the support of programming languages aswell.
		
But when it comes to microservices application development, the support of programming languages by providing api/libraries is not sufficient, along with that we need infrastructure, discovery services, collaboration tools, deployment tools, monitoring, log aggregrators are required as well.
1. programming language support
2. bunch of tools in collborating/deliverying these microservices

Now the programming languages along with providing necessary apis, they should provide all the required tools in building and delivering the microservices, but unfortunately we dont have even a single programming language that comes up with providing full suite of tools/technologies needed in developing the microservices. Due to which implementing the microservices becomes very complex.
		
To help us in building the microservices applications there are different players in the market that identified the necessary tools/api needed and provided to us as below:

1. Netflix 
one of the early innovator and adoptor of microservices architecture, they build their own set of tools in facilitating development, deployment, discovery/ delivery of the microservices. They distributed many of these tools open-source to the community which we can adopt and use them
1.1 eureka server (discovery server)
1.2 ribbon
1.3 hystrix
1.4 zipkin
1.5 zuul
1.6 slueth

2. Apache 
has provided few tools for facilitating the deployment of microservices
Zookeeper

Integrating these various different tools and making them work together in building, deploying and delivering the microservice applications seems to very complex

To overcome the above problems in building microservice applications, the spring framework has provided spring cloud/spring microservices modules


The support of microservices in spring framework has been introduced in #2 phases
1. Phase-I
The goal of Phase-I is to provide an microservices module that helps in integrating various different third-party vendor tools together and facilitate them to be deployed as a whole system

Spring microservices:
- integrate with eureka server
- zuul
- hystrix
- ribbon

2. Phase-II
The spring framework started building their own components replacing majority of the third-party vendor components in building microservices
For eg.. 
	1. we dont need to use Netflix Ribbon for client-side loadbalancing, instead spring has provided spring cloud-loadbalancer module.
	2. Spring microservices has provided CircuitBreaker (Resilience4J), so that we dont need to use Netflix Hystrix
	
hence building the microservices using spring microservices module becomes very easy.
		
		
	























































		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

























